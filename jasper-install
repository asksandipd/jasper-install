#!/bin/bash

# global constants   ---------------------------------------------------------

# number of processors to use
: ${PMAX:=`ls -1d /sys/devices/system/cpu/cpu[0-9]* | wc -l`}

# read configuration
: ${CFG_FILE:=$0.cfg}
[ -f "$CFG_FILE" ] && source "$CFG_FILE"

# check uid = 0   ------------------------------------------------------------

if [ "$UID" != "0" ]; then
  echo "error: you need to be root to run this script!" >&2
  exit 3
fi

# write message   ------------------------------------------------------------

msg() {
  echo -e "$(date): $1"
}

# --- update package system   ------------------------------------------------

install_update() {
  msg "info: updating packages"
  apt-get update
}

# --- upgrade system   -------------------------------------------------------

install_upgrade() {
  msg "info: upgrading system"
  apt-get -y upgrade
}

# --- install more swap-space (needed for compiles)   ------------------------

install_swap() {
  sed -i -e 's/100/1024/' /etc/dphys-swapfile
  /sbin/dphys-swapfile swapoff
  /sbin/dphys-swapfile setup
  /sbin/dphys-swapfile swapon
}

# --- basic development-packages  --------------------------------------------

install_devtools() {
  msg "info: installing development tools and environment"
  apt-get -y install git-core \
                     python-dev python-pip python-pyaudio libyaml-dev \
                     bison \
                     libasound2-dev libportaudio-dev \
                     subversion autoconf libtool automake gfortran g++ \
                     build-essential zlib1g-dev flex libesd0-dev libsndfile1-dev
}

# --- change alsa configuration (output goes to 3.5mm jack)   ----------------

install_alsa() {
  msg "info: configuring alsa"
  sed -i -e "/options snd-usb-audio/s/-2/0/" /etc/modprobe.d/alsa-base.conf
  alsa force-reload
}

# --- add user jasper   ------------------------------------------------------

install_user() {
  msg "info: creating user $USER_ADD:$GROUP_ADD for jasper"

  # create group for user...
  addgroup --gid $GID_ADD $GROUP_ADD

  # create user with initial password 'init#pw' ...
  echo -e "$USER_PWD\n$USER_PWD" | \
        adduser  --gecos "" --groups audio \
           --home /home/$USER_ADD --uid $UID_ADD --gid $GID_ADD $USER_ADD

  # ... and force user to change at first login
  chage -d 0 $USER_ADD

  #update user profile
  cat >> /home/$USER_ADD/.profile <<EOF

LD_LIBRARY_PATH="${PREFIX}/lib"
export LD_LIBRARY_PATH
PATH=\$PATH:${PREFIX}/lib/
export PATH
EOF

}

# --- install jasper   -------------------------------------------------------

install_jasper() {
  cd ${PREFIX}/lib
  git clone https://github.com/jasperproject/jasper-client.git jasper
  pip install --upgrade setuptools
  pip install -r jasper/client/requirements.txt
  chmod +x jasper/jasper.py

  # add default profile for jasper  
}

# --- install pocket-sphinx   -----------------------------------------------

install_pocketsphinx() {
  eval `grep "VERSION_ID" /etc/os-release`
  if [ $VERSION_ID -gt 7 ]; then
    apt-get -y install pocketsphinx
  else
    echo 'deb http://ftp.debian.org/debian jessie main contrib non-free' > \
         /etc/apt/sources.list.d/jessie.list
    apt-get update
    apt-get -y --force-yes -t jessie install pocketsphinx python-pocketsphinx
    rm -f /etc/apt/sources.list.d/jessie.list
    apt-get update
  fi
}

# --- install pocket-sphinx from source   -----------------------------------

install_pocketsphinx_src() {
  mkdir -p /usr/local/src
  cd /usr/local/src
  [ ! -f sphinxbase-${SPHINX_VERSION}.tar.gz ] && \
    wget http://downloads.sourceforge.net/project/cmusphinx/sphinxbase/${SPHINX_VERSION}/sphinxbase-${SPHINX_VERSION}.tar.gz
  if [ ! -f sphinxbase-${SPHINX_VERSION}.tar.gz ]; then
    msg "error: download of sphinxbase failed"
    return 3
  fi

  tar -zxvf sphinxbase-${SPHINX_VERSION}.tar.gz
  cd sphinxbase-${SPHINX_VERSION}/
  ./configure --enable-fixed
  make -j $PMAX
  make install PREFIX="$PREFIX"

  cd /usr/local/src
  [ ! -f pocketsphinx-${SPHINX_VERSION}.tar.gz ] && \
    wget http://downloads.sourceforge.net/project/cmusphinx/pocketsphinx/${SPHINX_VERSION}/pocketsphinx-${SPHINX_VERSION}.tar.gz
  if [ ! -f pocketsphinx-${SPHINX_VERSION}.tar.gz ]; then
    msg "error: download of pocketsphinx failed"
    return 3
  fi

  tar -zxvf pocketsphinx-${SPHINX_VERSION}.tar.gz
  cd pocketsphinx-${SPHINX_VERSION}/
  ./configure
  make -j $PMAX
  make install PREFIX="$PREFIX"
}

# --- install CMUCLMTK   -----------------------------------------------------

install_CMUCLMTK() {
  mkdir -p /usr/local/src
  cd /usr/local/src
  svn co https://svn.code.sf.net/p/cmusphinx/code/trunk/cmuclmtk/
  cd cmuclmtk/
  ./autogen.sh && make -j $PMAX && make install PREFIX="$PREFIX"
}

# --- install OpenFST   ------------------------------------------------------

install_openfst() {
  local cpus="$PMAX"
  if [ "$PMAX" -eq 4 ]; then
    # to prevent excessive swapping on model 2
    cpus=2
  fi
  cd /usr/local/src
  [ ! -f openfst-${OPENFST_VERSION}.tar.gz ] && \
    wget http://www.openfst.org/twiki/pub/FST/FstDownload/openfst-${OPENFST_VERSION}.tar.gz

  [ ! -f openfst-${OPENFST_VERSION}.tar.gz ]; then
    msg "error: download of openfst failed"
    return 3
  fi

  tar -xzf openfst-${OPENFST_VERSION}.tar.gz
  cd openfst-${OPENFST_VERSION}
  ./configure --enable-compact-fsts --enable-const-fsts --enable-far \
              --enable-lookahead-fsts --enable-pdt \
              --enable-static=no
  make -j $cpus
  make install PREFIX="$PREFIX"

  # patch include-file (needed by phonetisaurus, workaround for gcc 4.6-bug)
  sed -i  \
      -e '/\.begin[^(]/s/\.begin/.begin_/g' \
      -e '/>begin[^(]/s/>begin/>begin_/g' \
      -e '/\.end[^(]/s/\.end/.end_/g' \
      -e '/>end[^(]/s/>end/>end_/g' /usr/local/include/fst/interval-set.h
}

# --- install m2m_aligner   --------------------------------------------------

install_m2m_aligner() {
  cd /usr/local/src
  [ ! -f m2m-aligner-${M2M_ALIGNER_VERSION}.tar.gz ] && \
    wget https://m2m-aligner.googlecode.com/files/m2m-aligner-${M2M_ALIGNER_VERSION}.tar.gz
  if [ ! -f m2m-aligner-${M2M_ALIGNER_VERSION}.tar.gz ]; then
    msg "error: download of m2m-aligner failed"
    return 3
  fi

  tar -xzf m2m-aligner-${M2M_ALIGNER_VERSION}.tar.gz
  cd m2m-aligner-${M2M_ALIGNER_VERSION}/
  make -j $PMAX
  install -m 755 m2m-aligner ${PREFIX}/bin
}

# --- install mitlm   --------------------------------------------------------

install_mitlm() {
  cd /usr/local/src
  [ ! -f mitlm-${MITLM_VERSION}.tar.gz ] && \
    wget https://mitlm.googlecode.com/files/mitlm-${MITLM_VERSION}.tar.gz
  if [ ! -f mitlm-${MITLM_VERSION}.tar.gz ]; then
    msg "error: download of mitlm failed"
    return 3
  fi

  tar -xzf mitlm-${MITLM_VERSION}.tar.gz
  cd mitlm-${MITLM_VERSION}/
  ./configure
  make -j $PMAX
  make install PREFIX="$PREFIX"
}

# --- install phonetisaurus   ------------------------------------------------

install_phonetisaurus() {
  cd /usr/local/src
  [ ! -f phonetisaurus-${PHONETISAURUS_VERSION}.tgz ] && \
    wget https://www.dropbox.com/s/154q9yt3xenj2gr/phonetisaurus-${PHONETISAURUS_VERSION}.tgz
  if [ ! -f phonetisaurus-${PHONETISAURUS_VERSION}.tgz ]; then
    msg "error: download of phonetisaurus failed"
    return 3
  fi

  tar -xvf phonetisaurus-${PHONETISAURUS_VERSION}.tgz
  cd phonetisaurus-${PHONETISAURUS_VERSION}/phonetisaurus/src
  make -j $PMAX ../../bin/phonetisaurus-g2p
  install -m 755 ../../bin/phonetisaurus-g2p ${PREFIX}/bin
}

# --- install phonetisaurus FST model   --------------------------------------

install_phonetisaurus_fst() {
  cd /usr/local/src
  [ ! -f  g014b2b.tgz ] && \
    wget -O g014b2b.tgz https://www.dropbox.com/s/kfht75czdwucni1/g014b2b.tgz?dl=0
  if [ ! -f  g014b2b.tgz ]; then
    msg "error: download of g014b2b  failed"
    return 3
  fi

  tar -xzf g014b2b.tgz
  cd g014b2b/
  LD_LIBRARY_PATH="$PREFIX/lib" ./compile-fst.sh
  cd ..
  rm -fr  "${PREFIX}/lib/phonetisaurus"
  mv g014b2b "${PREFIX}/lib/phonetisaurus"
}

# --- install Phonetisaurus, m2m-aligner and MITLM   -------------------------

install_phonetisaurus_exp() {
  echo 'deb http://ftp.debian.org/debian experimental main contrib non-free' > \
       /etc/apt/sources.list.d/experimental.list
  apt-get update
  apt-get -y --force-yes -t experimental install phonetisaurus m2m-aligner mitlm
}

# --- install julius   ------------------------------------------------------

install_julius() {
  cd /usr/local/src
  [ ! -f  julius-${JULIUS_VERSION}.tar.gz ] && \
    wget http://sourceforge.net/projects/julius/downloads/60273/julius-${JULIUS_VERSION}.tar.gz
  if [ ! -f  julius-${JULIUS_VERSION}.tar.gz ]; then
    msg "error: download of julius failed"
    return 3
  fi

  cd julius
  ./configure --enable-words-int
  make -j $PMAX
  make install PREFIX="$PREFIX"
}

# --- install julius model and lexicon   ------------------------------------

install_julius_modlex() {
  :
}

# --- install festival   -----------------------------------------------------

install_festival() {
  apt-get -y install festival festvox-don
}

# --- install flite   --------------------------------------------------------

install_flite() {
  apt-get -y install flite
}

# --- install svox pico   ---------------------------------------------------

install_svoxpico() {
  apt-get -y install libttspico-utils
}

# --- install google TTS   ---------------------------------------------------

install_google_tts() {
  apt-get -y install python-pymad
  pip install --upgrade gTTS
}

# --- install ivona   --------------------------------------------------------

install_ivona() {
  apt-get -y install python-pymad
  pip install --upgrade pyvona
}

# --- install espeak   -------------------------------------------------------

install_espeak() {
  apt-get -y install espeak
}

# --- finalize   --------------------------------------------------------------

install_finalize() {
  chown -R root:staff /usr/local/*
}

# --- install a module   -----------------------------------------------------

do_install() {
  declare -i start duration
  local var
  var="INSTALL_$module"
  if [ -z "${!var}" ]; then
    msg "error: INSTALL_$module is unset!"
    return
  elif [ "${!var}" = "0" ]; then
    msg "info: not installing module $module"
    return
  fi

  start=$SECONDS
  msg "info: installing module $module"
  eval install_$module
  msg "info: install of module $module finished"
  let duration=$SECONDS-start
  msg "info: duration for module $module: $duration sec"
}

# --- main program   ---------------------------------------------------------

if [ -z "$1" -o "$1" = "-h" ]; then
  echo -e "usage: $0 all | module [...]" >&2
  exit 0 
elif [ "$1" = "all" ]; then
  # extract module list from this file
  MODULE_LIST=$(sed -ne '/^install_/s/install_\(.*\)(.*/\1/p' "$0")
else
  # use modules from the command line
  MODULE_LIST="$@"
fi

SECONDS=0
msg "info: start time: $(date)" | tee "$LOGFILE"

for module in $MODULE_LIST; do
  do_install "$module" 2>&1 | tee -a "$LOGFILE"
done
msg "info: total duration: $SECONDS sec" >> "$LOGFILE"
msg "info: end time: $(date)"       >> "$LOGFILE"

echo -e "\n\nSummary:\n"
head -n 1 "$LOGFILE"
echo
grep "duration for module" "$LOGFILE"
echo
tail -n 2 "$LOGFILE"
